/* 
Task allocation:
Josh: menu, binaryToDecimal, Allow the user to select, or create, the first generation,
		saving the output of your program to a text file on disk, 
		

Luke: DecimalToBinary, 
		base code, 
		Allow the user to select different lengths of the first generation, and to select different numbers of generations to produce. 
		other rules than 30

Fergus: 
		Loading saved files, 
		Write your automata out to a text file so that you can look at the results once the program has completed. 
		Wrap the ends of your automata array around so that the right-hand end continues onto the left-hand end and vice-versa.

*/

#include <stdio.h>

int generateNewGen (int generationSize){
    char *pParent = customParent();
    char childGen [sizeOf(pParent)];
    // we will have to add in the custom rule extension here
    char ruleArray [8] = {0,0,0,1,1,1,1,0};
    for(int i = 0; i <= sizeOf(pParent); i++){
        int rule = checkRules(pParent[i]);
        childGen[i] = ruleArray[rule];
    }
}

int indexRight(int index, int generationSize){
    if(index == generationSize-1){
        return 0;
    }
     else{
        return index+1;
    }
}

int indexLeft(int index, int generationSize){
    if(index == 0){
        return generationSize-1;
    }
    else{
        return index-1;
    }
}

int checkRules(char[] parentGen){
    if(parentGen == NULL){
        printf("error, null parent generation");
    }
    if(parentGen[indexLeft(i,generationSize)] == 1 && parentGen[i] == 1 && parentGen[indexRight(i,generationSize)] == 1){
        return 1;
    }
    if(parentGen[indexLeft(i,generationSize)] == 1 && parentGen[i] == 1 && parentGen[indexRight(i,generationSize)] == 0){
        return 2;
    }
    if(parentGen[indexLeft(i,generationSize)] == 1 && parentGen[i] == 0 && parentGen[indexRight(i,generationSize)] == 1){
        return 3;
    }
    if(parentGen[indexLeft(i,generationSize)] == 1 && parentGen[i] == 0 && parentGen[indexRight(i,generationSize)] == 0){
        return 4;
    }   
    if(parentGen[indexLeft(i,generationSize)] == 0 && parentGen[i] == 1 && parentGen[indexRight(i,generationSize)] == 1){
        return 5;
    }
    if(parentGen[indexLeft(i,generationSize)] == 0 && parentGen[i] == 1 && parentGen[indexRight(i,generationSize)] == 0){
        return 6;
    }
    if(parentGen[indexLeft(i,generationSize)] == 0 && parentGen[i] == 0 && parentGen[indexRight(i,generationSize)] == 1){
        return 7;
    }
    if(parentGen[indexLeft(i,generationSize)] == 0 && parentGen[i] == 0 && parentGen[indexRight(i,generationSize)] == 0){
        return 8;
    }
}

void printArray(int generationSizel, char [] currentGen){
    for(i==0;i<generationSize;i++){
        printf("%c", currentGen[i]);
    }
}

int binaryToInteger();
int customParent();
int saveOutput();

int main (void)
{
    int option;

    printf("\n");
    printf("        Welcome to Cellular Automata\n");
    printf("------------------------------------------\n\n");


    do
    {
        printf("Please enter an option from the main menu: \n");
        printf("Main Menu\n");
        printf("1. Convert Binary to Decimal\n");
        printf("2. Save to a file\n");
        printf("3. Select or Create the First Generation\n");
        printf("0. Quit.\n");
        scanf("%d",&option);


        switch(option)
        {

            case 1:
                printf("Converting binary to decimal...\n");
                binaryToInteger();
                break;

            case 2:
                printf("Saving the output to 'OutputFile'...\n ");
               // saveOutput();
                break;

            case 3:
                printf("Select or Create the First Generation\n");
                customParent();
                break;

            case 0:
                printf("Goodbye!\n");
                break;

            default:
                printf("Invalid input, please enter a number between \n");
                break;
        }

    }while(option != 0);

}

int binaryToInteger()
{
    long num;
    long binaryNumber;
    long decimalNumber = 0;
    int baseMultiplier = 1;
    int remainder;

    printf("Enter a binary number\n");
    scanf("%ld", &num); 
    binaryNumber = num;

    while (num > 0)
    {
        remainder = num % 10;
        decimalNumber = decimalNumber + remainder * baseMultiplier;
        num = num / 10 ;
        baseMultiplier = baseMultiplier * 2;
    }

    printf("The Binary number is = %ld \n", binaryNumber);
    printf("Its decimal equivalent is = %ld \n", decimalNumber);

}



//This function should save the output of your program to a text file on disk, 
int saveOutput ()
{

	//if (<name of array> == NULL)
	//	printf("An error occured.\n");

	printf("Please enter a name for the file you want to save the output as: \n");
	
	FILE *fp;
	fp = fopen(OutputFile, "w");

	if (fp !=NULL)
	{
		
		char c ='#';
		char c2 = '\n';

		while()//<array that we're using> != NULL)
		{
		
		//write the trackName to the file	
		//fputs(temp->trackName, fp);
		//write #
		fputc(c,fp);
		//write trackLength to the file
		//fprintf(fp, "%d", temp->trackLength);
		//write #
		fputc(c,fp);
		//new line
		fputc(c2, fp);

		//temp= temp->next;
		}
	}

	//close file
	fclose(fp);

}


char customParent()
{
	int customParentGenSize;
	printf("Please enter the size of the custom parent generation you would like: \n");
	scanf("%d", &customParentGenSize); 

	int parent[customParentGenSize];

	for(int i=0; i<customParentGenSize; i++)
	{
		int customInput;

		printf("Please enter a '1' or '0' to add into your parent generation: \n");
		scanf("%d", &customInput); 

		if (customInput==0 || customInput==1)
		{
			parent[i] = customInput;
		}

		else
		{
			printf("Invalid input please wite '1' or '0' \n");
			i--;
		}
	}

	printf("You typed: \n");
	for(int i=0; i<customParentGenSize; i++)
	{
		printf("%d", parent[i]);
	}
	printf("\n");

    char *pPointer = parent;
    return pPointer;

	//OY LUKE, YOU MIGHT NEED A RETURN STATEMENT HERE TO IMPLEMENT THIS INTO THE BASE XOXO
    // THANKS JOSH I HAVE SEEN THIS, ROGER ROGER!
}
